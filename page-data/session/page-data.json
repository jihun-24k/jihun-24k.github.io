{"componentChunkName":"component---src-pages-contentful-post-slug-tsx","path":"/session/","result":{"data":{"contentfulPost":{"title":"세션 구현하기","category":["Web"],"date":"2024-09-08","slug":"session","thumbnail":{"url":"https://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=250&h=128&q=50&fm=webp 250w,\nhttps://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=500&h=256&q=50&fm=webp 500w,\nhttps://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=1000&h=511&q=50&fm=webp 1000w","sizes":"(min-width: 1000px) 1000px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=1000&h=511&q=50&fm=png","srcSet":"https://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=250&h=128&q=50&fm=png 250w,\nhttps://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=500&h=256&q=50&fm=png 500w,\nhttps://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=1000&h=511&q=50&fm=png 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"}},"layout":"constrained","backgroundColor":"#f8f8f8","width":1000,"height":511}},"description":{"description":"세션 정의와 관리, 전달방법을 정리하고 직접 세션을 구현해보는 과정을 정리한 글"},"content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"자바 웹 프로그래밍 Next Step을 실습하는 과정 중 작성한 글이다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"요구사항\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"서블릿에서 지원하는 HttpSession API의 일부를 지원해야 한다. 아래 핵심 메서드 5개를 구현해야 한다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"String getId()\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"void setAttribute(String name, Object value)\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Object getAttribute(String name)\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"void removeAttribute(String name)\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"void invalidate()\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"세션(Session)이란?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"먼저 세션이 무엇인지 알아야 한다. 세션을 어학사전에 검색해보면 \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"“(특정 활동을 위한) 시간”\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" 이라고 나온다. 활동을 관련성 있는 처리로, 시간을 흐름으로 바꾸면 웹에서 세션을 말한다. 즉, 세션은 “일련의 관련성 있는 처리의 흐름”이다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"HTTP는 상태가 없는 프토토콜이다. 같은 관련성이 있는 처리를 구별해 낼 수 없다. 하지만 장바구니에 상품을 담거나 다음 페이지로 넘어갈 때 로그인이 유지되는 것과 같은 상태를 유지하고 싶은 상황이 있다. 상태가 유지될 수 있게 해주는 것이 세션이다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"세션 관리\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"1bLJ5d8d4eoZzkpDZNBv3o\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"웹서버는 하나의 웹브라우저랑 통신하지 않는다. 여러 웹브라우저와 통신한다. 그래서 요청을 보내오는 여러 웹브라우저를 구별하기 위해 각 웹브라우저에 고유한 ID를 발급해준다. 이를 \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"세션 ID\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"라 한다. 웹서버는 웹브라우저 별로 세션을 저장하고 세션 ID로 관리한다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"그림과 같이 장바구니에 어떤 물품을 넣었는가 같은 일련의 처리는 세션 데이터로 웹서버에 저장된다. 웹브라우저는 자신의 세션 ID를 통해 세션 데이터를 참조 할 수 있다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"세션 전달\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"그렇다면 웹서버에서 생성된 세션 ID는 웹브라우저에 어떻게 전달할까? URL이나 폼(form) 형식으로 데이터를 주고 받을 수 도 있다. 하지만 보안상으로 더 안전한 쿠키로 전달한다. 여기서 엿볼 수 있는 것은 세션도 결국 쿠키를 이용한다는 것이다. 세션과 쿠키를 별개의 개념으로 오해하는 경우도 종종 있다. 하지만 세션도 쿠키를 이용한다. HTTP 통신에서 상태를 유지하기 위해선 쿠키가 필수라고 할 수 있다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"쿠키로 전달하는 과정은 여느 쿠키 활용방식과 같다. 웹서버는 생성한 세션ID를 HTTP 응답 헤더에 “Set-Cookie” 속성을 이용해 넘겨준다. 세션 ID를 받은 웹브라우저는 다음 요청땐 HTTP 요청 헤더에 “Cookie” 의 값으로 세션 ID를 보내면서 세션 데이터를 참조한다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"요구사항 분석\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"ordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"클라이언트와 서버 간에 주고 받을 고유한 아이디를 생성해야한다. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"JDK에서 제공하는 UUID를 활용한다.\",\"marks\":[],\"data\":{}}]}]}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"UUID를 쿠키를 통해 전달해야한다. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"응답할 때 Set-Cookie 속성에 세션 ID 전달\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Java에서 세션 ID 쿠키 이름은 JSESSION\",\"marks\":[],\"data\":{}}]}]}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"서버 측에서 모든 클라이언트의 세션 값을 관리하는 저장소 클래스를 추가한다. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"HttpSession을 관리하는 클래스를 만들기 (HttpSessions)\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Map<String, Session> 형태의 자료 구조 생성\",\"marks\":[],\"data\":{}}]}]}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"클라이언트별 세션 데이터를 관리할 수 있는 클래스를 추가한다. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Session 클래스 생성\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Map<String, Object> 형태의 자료 구조 \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"여러 세션 데이터를 담아야 하기 때문이다.\",\"marks\":[],\"data\":{}}]}]}]}]}]}]}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"세션 구현\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"고민 1. 세션 ID를 생성하고 전달하는 시기\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"처음부터 고민이 생겼다. 세션 ID 생성하고 전달하는 시기를 언제로 해야 할지 말이다. 생각해낸 방법은 두 가지다. 첫 번째 방법은 클라이언트가 요청을 보내자 마자 세션 ID를 생성해 전달하는 것이다. 두 번째 방법은 로그인과 같은 상태 유지가 필요한 요청이 오면 그때 세션 ID를 생성해 전달하는 것이다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"두 방법 중 고민하다 전자를 선택했다. 후자는 여러 상황마다 세션이 필요할 때 ID를 생성하게 하면 코드의 중복이 많이 일어나기 때문이다. 들어오는 요청에서 세션 ID를 확인해 다시 쿠키로 전달해주는 코드는 아래와 같다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"세션 ID 생성 및 전달\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"language::java\\n// RequestHandler.class\\n\\nif (getJSessionId(request.getHeader(\\\"Cookie\\\")) == null) {\\n\\t\\tUUID uuid = UUID.randomUUID();\\n\\t\\tresponse.addHeader(\\\"Set-Cookie\\\", \\\"JSESSIONID=\\\"+ uuid);\\n}\\n\\n...\\n\\nprivate String getJSessionId (String cookies) {\\n\\t\\treturn HttpRequestUtils.parseCookies(cookies).get(\\\"JSESSIONID\\\");\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"고민 2. UUID(세션 ID)를 생성하는 곳\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"외부에서 UUID를 생성해서 세션에 주입할지 아니면 세션이 생성될 때 세션 클래스 내부에서 UUID를 생성 할지 고민했다. 세션 저장소에서 세션을 생성해서 저장하기로 해서 UUID는 외부에서 주입 받기로 했다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"세션 저장소 클래스\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"language::java\\npublic class HttpSessions {\\n    private static Map<String, HttpSession> sessions = new HashMap<>();\\n\\n    public static HttpSession getSession(String uuid) {\\n        if (sessions.get(uuid) == null) {\\n            addSession(uuid);\\n        }\\n        return sessions.get(uuid);\\n    }\\n\\n    private static void addSession(String uuid) {\\n        sessions.put(uuid, new HttpSession(uuid));\\n    }\\n    \\n    public static void remove(String uuid) {\\n        sessions.remove(uuid);\\n    }\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"어디에서든 세션 저장소에 접근할 수 있도록 static으로 생성\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"찾는 세션이 없다면 세션 ID로 새로운 세션을 생성해 저장하고 반환\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"세션 클래스\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"language::java\\npublic class HttpSession {\\n\\n    private final String uuid;\\n    private final Map<String, Object> attribute = new HashMap<>();\\n\\n    public HttpSession(String uuid) {\\n        this.uuid = uuid;\\n    }\\n\\n    public String getId() {\\n        return uuid;\\n    }\\n\\n    public void setAttribute(String name, Object value) {\\n        attribute.put(name, value);\\n    }\\n\\n    public Object getAttribute(String name) {\\n        return attribute.get(name);\\n    }\\n\\n    public void removeAttribute(String name) {\\n        attribute.remove(name);\\n    }\\n\\n    public void invalidate() {\\n        HttpSessions.remove(uuid);\\n    }\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"세션 적용 방법\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"이전에 로그인 된 사용자만이 사용자 리스트를 조회할 수 있게 작성했다. 이때 로그인을 쿠키 통해 확인하는 부분에 세션으로 바꿔 적용 시키자 한다. 쿠키에서 세션 ID를 조회하는 등 쿠키의 코드가 많아짐에 따라 따로 쿠키 클래스로 분리하는 리팩토링 작업 한다. 그 다음 쿠키와 세션을 요청 클래스에서 가져올 수 있도록 한다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"먼저 로그인 시 세션에 사용자 정보를 저장한다. 로그인 확인이 필요할 때 세션에서 사용자 정보가 있는지에 따라 로그인을 확인한다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"language::java\\n// LoginController.class\\n...\\nif (user != null && user.getPassword().equals(request.getParameter(\\\"password\\\"))) {\\n\\t\\tHttpSession session = request.getSession();\\n\\t\\tsession.setAttribute(\\\"user\\\", user);\\n\\t\\tresponse.sendRedirect(\\\"/index.html\\\");\\n} else {\\n\\t\\tresponse.sendRedirect(\\\"/user/login_failed.html\\\");\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"language::java\\n// ListUserController.class\\n\\nHttpSession session = request.getSession();\\n\\nif (isLogin(session))) {\\n\\t...\\n}\\n\\n...\\n\\nprivate boolean isLogin(HttpSession session) {\\n\\t\\treturn session.getAttribute(\\\"user\\\") != null;\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"마무리\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"서버에서 사용자 데이터를 저장, 관리한다는 측면에서 세션은 쿠키보다 더 보안적으로 낫다고 할 수 있다. 주고 받는 정보는 세션 ID 뿐이기 때문이다. 하지만 보안적으로 완벽한 것은 아니다. 누군가 중간에서 세션 ID 자체를 가로채거나 하면 보안이 취약 해진다. 세션의 보안을 더 강화하고자 하면 domian, path, max-age, expires, secure 속성들도 알아보자.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"참고 자료\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"박재성, 자바 웹 프로그래밍 Next Step, 로드북, 2016\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"코바야시 쿄헤이, 그림과 작동 원리로 쉽게 이해하는 웹의 기초, 교보문고, 2024\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}","references":[{"contentful_id":"1bLJ5d8d4eoZzkpDZNBv3o","title":"세션 동작과정","description":"전체적인 세션을 관리하는 과정을 나타낸 그림","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=284&h=145&q=50&fm=webp 284w,\nhttps://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=567&h=290&q=50&fm=webp 567w,\nhttps://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=1134&h=580&q=50&fm=webp 1134w","sizes":"(min-width: 1134px) 1134px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=1134&h=580&q=50&fm=png","srcSet":"https://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=284&h=145&q=50&fm=png 284w,\nhttps://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=567&h=290&q=50&fm=png 567w,\nhttps://images.ctfassets.net/w6wmczdusxy8/1bLJ5d8d4eoZzkpDZNBv3o/d2aa73a9b279cf45e8af35bf4567b4ce/___________2024-08-23______5.03.36.png?w=1134&h=580&q=50&fm=png 1134w","sizes":"(min-width: 1134px) 1134px, 100vw"}},"layout":"constrained","backgroundColor":"#f8f8f8","width":1134,"height":580},"__typename":"ContentfulAsset"}]}}},"pageContext":{"id":"17467432-e8bd-595d-b71f-d078cc09aa75","slug":"session","__params":{"slug":"session"}}},"staticQueryHashes":["506648845"],"slicesMap":{}}